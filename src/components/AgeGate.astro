---
// Age Gate Component with Vault Door Design
---

<div id="age-gate" class="age-gate">
  <!-- Background -->
  <div class="vault-background"></div>

  <!-- Vault Door -->
  <div class="vault-door">
    <!-- Door Frame -->
    <div class="door-frame">
      <!-- Door Surface -->
      <div class="door-surface">
        <!-- Title -->
        <div class="vault-title">
          <h1>MINT CANNABIS</h1>
          <p>SECURE ACCESS REQUIRED</p>
        </div>

        <!-- Combination Lock -->
        <div class="combination-lock">
          <div class="lock-face">
            <!-- Outer Ring -->
            <div class="lock-ring outer-ring"></div>
            <!-- Middle Ring -->
            <div class="lock-ring middle-ring"></div>
            <!-- Inner Ring -->
            <div class="lock-ring inner-ring"></div>
            <!-- Center Dial -->
            <div class="center-dial"></div>
            <!-- Lock Numbers -->
            <div class="lock-numbers">
              {Array.from({length: 12}, (_, i) => (
                <div class={`number number-${i + 1}`} style={`transform: rotate(${i * 30}deg)`}>
                  <span style={`transform: rotate(${-i * 30}deg)`}>{(i + 1) * 5}</span>
                </div>
              ))}
            </div>
            <!-- Combination Display -->
            <div class="combination-display">
              <div class="digit-display">
                <span id="digit1">0</span>
                <span id="digit2">0</span>
                <span id="digit3">0</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Age Verification -->
        <div class="age-verification">
          <h2>Age Verification Required</h2>
          <p>You must be 21 years or older to enter.</p>
          <p>Enter the correct combination to proceed.</p>
          <div class="hint">Hint: Your age requirement</div>
        </div>

        <!-- Control Panel -->
        <div class="control-panel">
          <div class="combination-input">
            <input type="number" id="combo1" min="0" max="99" placeholder="00" maxlength="2">
            <input type="number" id="combo2" min="0" max="99" placeholder="00" maxlength="2">
            <input type="number" id="combo3" min="0" max="99" placeholder="00" maxlength="2">
          </div>
          <button id="enter-vault" class="vault-button">
            <span>ENTER VAULT</span>
            <div class="button-lights">
              <div class="light"></div>
              <div class="light"></div>
              <div class="light"></div>
            </div>
          </button>
          <button id="exit-vault" class="exit-button">
            <span>EXIT</span>
          </button>
        </div>

        <!-- Vault Bolts -->
        <div class="vault-bolts">
          <div class="bolt bolt-1"></div>
          <div class="bolt bolt-2"></div>
          <div class="bolt bolt-3"></div>
          <div class="bolt bolt-4"></div>
          <div class="bolt bolt-5"></div>
          <div class="bolt bolt-6"></div>
          <div class="bolt bolt-7"></div>
          <div class="bolt bolt-8"></div>
        </div>
      </div>
    </div>

    <!-- Door Handle -->
    <div class="door-handle">
      <div class="handle-base"></div>
      <div class="handle-wheel" id="vault-wheel">
        <div class="wheel-spokes">
          <div class="spoke"></div>
          <div class="spoke"></div>
          <div class="spoke"></div>
          <div class="spoke"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Status Display -->
  <div class="status-display">
    <div class="status-text" id="status-text">ACCESS DENIED</div>
    <div class="status-indicator" id="status-indicator"></div>
  </div>
</div>

<style>
  .age-gate {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: 'Orbitron', monospace;
    overflow: hidden;
  }

  .vault-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background:
      radial-gradient(circle at 30% 20%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 70% 80%, rgba(0, 255, 0, 0.05) 0%, transparent 50%),
      linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0a0a0a 100%);
    background-size: 100% 100%, 100% 100%, 100% 100%;
  }

  .vault-door {
    position: relative;
    width: min(800px, 90vw);
    height: min(800px, 90vh);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.8s ease-in-out;
  }

  .door-frame {
    width: 100%;
    height: 100%;
    background:
      linear-gradient(45deg, #2a2a2a 0%, #3a3a3a 50%, #2a2a2a 100%);
    border-radius: 50%;
    box-shadow:
      inset 0 0 50px rgba(0, 0, 0, 0.8),
      inset 0 0 100px rgba(0, 0, 0, 0.6),
      0 0 100px rgba(255, 215, 0, 0.3),
      0 0 200px rgba(255, 215, 0, 0.1);
    position: relative;
    border: 8px solid #1a1a1a;
  }

  .door-surface {
    width: calc(100% - 40px);
    height: calc(100% - 40px);
    background:
      radial-gradient(circle at 50% 50%, #3a3a3a 0%, #2a2a2a 70%, #1a1a1a 100%);
    border-radius: 50%;
    margin: 20px;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow:
      inset 0 0 30px rgba(0, 0, 0, 0.7),
      inset 0 0 60px rgba(0, 0, 0, 0.5);
  }

  .vault-title {
    position: absolute;
    top: 15%;
    text-align: center;
    color: #ffd700;
    text-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
  }

  .vault-title h1 {
    font-size: clamp(1.5rem, 4vw, 2.5rem);
    font-weight: bold;
    margin: 0;
    letter-spacing: 3px;
  }

  .vault-title p {
    font-size: clamp(0.8rem, 2vw, 1rem);
    margin: 5px 0 0 0;
    opacity: 0.9;
  }

  .combination-lock {
    position: relative;
    width: 200px;
    height: 200px;
    margin: 20px 0;
  }

  .lock-face {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: 50%;
    background:
      radial-gradient(circle, #4a4a4a 0%, #2a2a2a 70%, #1a1a1a 100%);
    box-shadow:
      inset 0 0 20px rgba(0, 0, 0, 0.8),
      0 0 30px rgba(255, 215, 0, 0.3);
  }

  .lock-ring {
    position: absolute;
    border-radius: 50%;
    border: 2px solid #ffd700;
    box-shadow: 0 0 10px rgba(255, 215, 0, 0.6);
  }

  .outer-ring {
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  .middle-ring {
    width: 80%;
    height: 80%;
    top: 10%;
    left: 10%;
  }

  .inner-ring {
    width: 60%;
    height: 60%;
    top: 20%;
    left: 20%;
  }

  .center-dial {
    position: absolute;
    width: 30px;
    height: 30px;
    background: #ffd700;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    box-shadow:
      0 0 15px rgba(255, 215, 0, 0.8),
      inset 0 0 10px rgba(0, 0, 0, 0.5);
  }

  .lock-numbers {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .number {
    position: absolute;
    width: 20px;
    height: 20px;
    top: 10px;
    left: 50%;
    transform-origin: 50% 90px;
    color: #ffd700;
    font-size: 12px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    text-shadow: 0 0 5px rgba(255, 215, 0, 0.8);
  }

  .combination-display {
    position: absolute;
    bottom: -50px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid #ffd700;
    border-radius: 10px;
    padding: 10px;
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
  }

  .digit-display {
    display: flex;
    gap: 5px;
    color: #00ff00;
    font-family: monospace;
    font-size: 18px;
    font-weight: bold;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.8);
  }

  .age-verification {
    text-align: center;
    color: #ffffff;
    margin: 20px 0;
    max-width: 300px;
  }

  .age-verification h2 {
    color: #ffd700;
    font-size: clamp(1rem, 3vw, 1.3rem);
    margin: 0 0 10px 0;
    text-shadow: 0 0 10px rgba(255, 215, 0, 0.6);
  }

  .age-verification p {
    font-size: clamp(0.8rem, 2vw, 0.9rem);
    margin: 5px 0;
    opacity: 0.9;
  }

  .hint {
    color: #00ff00;
    font-size: clamp(0.7rem, 1.5vw, 0.8rem);
    margin-top: 10px;
    font-style: italic;
    text-shadow: 0 0 8px rgba(0, 255, 0, 0.6);
  }

  .control-panel {
    position: absolute;
    bottom: 15%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
  }

  .combination-input {
    display: flex;
    gap: 10px;
  }

  .combination-input input {
    width: 50px;
    height: 40px;
    background: rgba(0, 0, 0, 0.8);
    border: 2px solid #ffd700;
    border-radius: 5px;
    color: #00ff00;
    text-align: center;
    font-size: 16px;
    font-weight: bold;
    font-family: monospace;
    box-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
  }

  .combination-input input:focus {
    outline: none;
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.6);
    border-color: #00ff00;
  }

  .vault-button, .exit-button {
    padding: 12px 30px;
    background: linear-gradient(45deg, #1a4a1a, #2a6a2a);
    border: 2px solid #00ff00;
    border-radius: 8px;
    color: #ffffff;
    font-weight: bold;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 1px;
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
  }

  .exit-button {
    background: linear-gradient(45deg, #4a1a1a, #6a2a2a);
    border-color: #ff4444;
    box-shadow: 0 0 20px rgba(255, 68, 68, 0.3);
  }

  .vault-button:hover, .exit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 30px rgba(0, 255, 0, 0.6);
  }

  .exit-button:hover {
    box-shadow: 0 0 30px rgba(255, 68, 68, 0.6);
  }

  .button-lights {
    position: absolute;
    top: 5px;
    right: 5px;
    display: flex;
    gap: 3px;
  }

  .light {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: #ff0000;
    box-shadow: 0 0 8px rgba(255, 0, 0, 0.8);
    animation: blink 2s infinite;
  }

  .light:nth-child(2) {
    animation-delay: 0.7s;
  }

  .light:nth-child(3) {
    animation-delay: 1.4s;
  }

  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0.3; }
  }

  .vault-bolts {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .bolt {
    position: absolute;
    width: 15px;
    height: 15px;
    background: #ffd700;
    border-radius: 50%;
    box-shadow:
      inset 0 0 5px rgba(0, 0, 0, 0.5),
      0 0 10px rgba(255, 215, 0, 0.6);
  }

  .bolt-1 { top: 10%; left: 50%; transform: translateX(-50%); }
  .bolt-2 { top: 25%; right: 15%; }
  .bolt-3 { top: 50%; right: 5%; transform: translateY(-50%); }
  .bolt-4 { bottom: 25%; right: 15%; }
  .bolt-5 { bottom: 10%; left: 50%; transform: translateX(-50%); }
  .bolt-6 { bottom: 25%; left: 15%; }
  .bolt-7 { top: 50%; left: 5%; transform: translateY(-50%); }
  .bolt-8 { top: 25%; left: 15%; }

  .door-handle {
    position: absolute;
    right: -80px;
    top: 50%;
    transform: translateY(-50%);
  }

  .handle-base {
    width: 40px;
    height: 80px;
    background: linear-gradient(90deg, #3a3a3a, #5a5a5a);
    border-radius: 20px;
    box-shadow:
      inset 0 0 10px rgba(0, 0, 0, 0.5),
      0 0 20px rgba(255, 215, 0, 0.2);
  }

  .handle-wheel {
    width: 60px;
    height: 60px;
    background: radial-gradient(circle, #4a4a4a, #2a2a2a);
    border: 3px solid #ffd700;
    border-radius: 50%;
    position: absolute;
    right: -10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    transition: transform 0.3s ease;
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);
  }

  .handle-wheel:hover {
    transform: translateY(-50%) rotate(15deg);
  }

  .wheel-spokes {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .spoke {
    position: absolute;
    width: 2px;
    height: 40%;
    background: #ffd700;
    left: 50%;
    top: 5%;
    transform-origin: bottom center;
    box-shadow: 0 0 5px rgba(255, 215, 0, 0.6);
  }

  .spoke:nth-child(1) { transform: translateX(-50%) rotate(0deg); }
  .spoke:nth-child(2) { transform: translateX(-50%) rotate(45deg); }
  .spoke:nth-child(3) { transform: translateX(-50%) rotate(90deg); }
  .spoke:nth-child(4) { transform: translateX(-50%) rotate(135deg); }

  .status-display {
    position: absolute;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 15px;
    background: rgba(0, 0, 0, 0.8);
    padding: 15px 25px;
    border-radius: 10px;
    border: 2px solid #ffd700;
    box-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
  }

  .status-text {
    color: #ff4444;
    font-weight: bold;
    font-size: 14px;
    letter-spacing: 1px;
    text-shadow: 0 0 10px rgba(255, 68, 68, 0.8);
  }

  .status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ff4444;
    box-shadow: 0 0 15px rgba(255, 68, 68, 0.8);
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.6; transform: scale(1.2); }
  }

  /* Success States */
  .success .status-text {
    color: #00ff00;
    text-shadow: 0 0 10px rgba(0, 255, 0, 0.8);
  }

  .success .status-indicator {
    background: #00ff00;
    box-shadow: 0 0 15px rgba(0, 255, 0, 0.8);
  }

  .success .light {
    background: #00ff00;
    box-shadow: 0 0 8px rgba(0, 255, 0, 0.8);
  }

  /* Vault Opening Animation */
  .vault-opening {
    animation: vaultOpen 2s ease-in-out forwards;
  }

  @keyframes vaultOpen {
    0% { transform: scale(1) rotateY(0deg); }
    50% { transform: scale(1.1) rotateY(5deg); }
    100% { transform: scale(0) rotateY(90deg); opacity: 0; }
  }

  /* Hidden state */
  .age-gate.hidden {
    display: none;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .vault-door {
      width: 95vw;
      height: 95vw;
      max-width: 500px;
      max-height: 500px;
    }

    .door-handle {
      right: -60px;
    }

    .handle-wheel {
      width: 50px;
      height: 50px;
    }

    .combination-lock {
      width: 150px;
      height: 150px;
    }

    .vault-title h1 {
      font-size: 1.5rem;
    }

    .combination-input input {
      width: 40px;
      height: 35px;
      font-size: 14px;
    }
  }
</style>

<script>
  // Age gate functionality
  document.addEventListener('DOMContentLoaded', function() {
    const ageGate = document.getElementById('age-gate');
    const enterButton = document.getElementById('enter-vault');
    const exitButton = document.getElementById('exit-vault');
    const combo1 = document.getElementById('combo1');
    const combo2 = document.getElementById('combo2');
    const combo3 = document.getElementById('combo3');
    const statusText = document.getElementById('status-text');
    const statusIndicator = document.getElementById('status-indicator');
    const vaultWheel = document.getElementById('vault-wheel');
    const vaultDoor = document.querySelector('.vault-door');

    // Check if user has already verified age
    if (localStorage.getItem('ageVerified') === 'true') {
      ageGate.classList.add('hidden');
      return;
    }

    // Correct combination (21)
    const correctCombination = ['2', '1', '0'];

    // Auto-focus and move to next input
    function setupInputs() {
      const inputs = [combo1, combo2, combo3];

      inputs.forEach((input, index) => {
        input.addEventListener('input', function() {
          if (this.value.length >= 1 && index < inputs.length - 1) {
            inputs[index + 1].focus();
          }
          updateDisplay();
        });

        input.addEventListener('keydown', function(e) {
          if (e.key === 'Backspace' && this.value === '' && index > 0) {
            inputs[index - 1].focus();
          }
        });
      });
    }

    // Update combination display
    function updateDisplay() {
      document.getElementById('digit1').textContent = combo1.value.padStart(1, '0') || '0';
      document.getElementById('digit2').textContent = combo2.value.padStart(1, '0') || '0';
      document.getElementById('digit3').textContent = combo3.value.padStart(1, '0') || '0';
    }

    // Check combination
    function checkCombination() {
      const userCombination = [combo1.value, combo2.value, combo3.value];

      if (userCombination.every((digit, index) => digit === correctCombination[index])) {
        // Correct combination
        statusText.textContent = 'ACCESS GRANTED';
        statusIndicator.parentElement.classList.add('success');

        // Rotate wheel
        vaultWheel.style.transform = 'translateY(-50%) rotate(180deg)';

        // Play success sound (if you want to add audio)
        // playSuccessSound();

        // Open vault after delay
        setTimeout(() => {
          vaultDoor.classList.add('vault-opening');

          setTimeout(() => {
            // Store verification in localStorage
            localStorage.setItem('ageVerified', 'true');
            localStorage.setItem('ageVerifiedTime', Date.now().toString());

            // Hide age gate
            ageGate.classList.add('hidden');
          }, 2000);
        }, 1000);

        return true;
      } else {
        // Wrong combination
        statusText.textContent = 'ACCESS DENIED';
        statusIndicator.parentElement.classList.remove('success');

        // Shake effect
        vaultDoor.style.animation = 'shake 0.5s ease-in-out';
        setTimeout(() => {
          vaultDoor.style.animation = '';
        }, 500);

        // Clear inputs after wrong attempt
        setTimeout(() => {
          combo1.value = '';
          combo2.value = '';
          combo3.value = '';
          updateDisplay();
          combo1.focus();
        }, 1000);

        return false;
      }
    }

    // Event listeners
    enterButton.addEventListener('click', checkCombination);

    exitButton.addEventListener('click', function() {
      // Redirect to a different site or show age restriction message
      window.location.href = 'https://www.samhsa.gov/find-help/national-helpline';
    });

    // Allow Enter key to submit
    [combo1, combo2, combo3].forEach(input => {
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          checkCombination();
        }
      });
    });

    // Wheel click animation
    vaultWheel.addEventListener('click', function() {
      this.style.transform = 'translateY(-50%) rotate(' + (Math.random() * 360) + 'deg)';
    });

    // Initialize
    setupInputs();
    combo1.focus();

    // Add shake animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-10px); }
        75% { transform: translateX(10px); }
      }
    `;
    document.head.appendChild(style);

    // Clear age verification after 24 hours
    const verifiedTime = localStorage.getItem('ageVerifiedTime');
    if (verifiedTime && Date.now() - parseInt(verifiedTime) > 24 * 60 * 60 * 1000) {
      localStorage.removeItem('ageVerified');
      localStorage.removeItem('ageVerifiedTime');
      ageGate.classList.remove('hidden');
    }
  });
</script>