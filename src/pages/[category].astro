---
import Layout from '../layouts/Layout.astro';

export const prerender = true;

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

export async function getStaticPaths() {
  try {
    const response = await fetch(`${API_BASE}/categories?pagination[pageSize]=100`);
    const data = await response.json();

    console.log('Categories data for static paths:', JSON.stringify(data, null, 2));

    if (data?.data && Array.isArray(data.data)) {
      const paths = data.data.map((category: any) => {
        const catData = category.attributes || category;
        const slug = catData.slug || catData.Slug || category.documentId;

        console.log('Creating path for category:', {
          name: catData.Name || catData.name,
          slug
        });

        return {
          params: { category: slug }
        };
      }).filter(p => p.params.category);

      console.log('Total category paths created:', paths.length);
      return paths;
    }
  } catch (error) {
    console.error('Error fetching categories:', error);
  }

  // Fallback to hardcoded categories if API fails
  console.log('Using fallback categories');
  return [
    { params: { category: 'flower' } },
    { params: { category: 'edibles' } },
    { params: { category: 'concentrates' } }
  ];
}

const { category } = Astro.params;

// Fetch category details
let categoryName = category.replace('-', ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
let categoryDescription = '';
let categoryImage = null;
let categoryRichText = '';

try {
  const response = await fetch(`${API_BASE}/categories?filters[slug][$eq]=${category}&populate=*`);
  if (response.ok) {
    const data = await response.json();
    if (data?.data?.[0]) {
      const cat = data.data[0];
      categoryName = cat.Name || cat.name || categoryName;
      categoryDescription = cat.Description || cat.description || cat.Discription || '';
      categoryRichText = cat.RichText || cat.richText || cat.rich_text || '';

      // Try to get image
      const imageData = cat.Image || cat.image;
      if (imageData?.url) {
        categoryImage = imageData.url.startsWith('http') ? imageData.url : `${API_BASE}${imageData.url}`;
      } else if (imageData?.data?.attributes?.url) {
        const url = imageData.data.attributes.url;
        categoryImage = url.startsWith('http') ? url : `${API_BASE}${url}`;
      }
    }
  }
} catch (error) {
  console.error('Error fetching category details:', error);
}

// Fetch products for this category
let products: any[] = [];
try {
  const response = await fetch(`${API_BASE}/products?filters[category][slug][$eq]=${category}&populate=*&pagination[pageSize]=50`);
  if (response.ok) {
    const data = await response.json();
    products = data?.data || [];
  }
} catch (error) {
  console.error('Error fetching products:', error);
}

// Category icon mapping
const categoryIcons: Record<string, string> = {
  'flower': 'üåø',
  'pre-rolls': 'üö¨',
  'vaporizers': 'üí®',
  'concentrates': 'üçØ',
  'edibles': 'üç≠',
  'topicals': 'üß¥',
  'cartridges': 'üñäÔ∏è',
  'tinctures': 'üíß'
};

const categoryIcon = categoryIcons[category] || 'üå±';
---

<Layout title={`${categoryName} - Cannabis Products`} description={categoryDescription || `Browse ${categoryName} cannabis products`}>
  <!-- Hero Section -->
  <div class="bg-gradient-to-r from-emerald-600 via-emerald-700 to-teal-700 text-white py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        {categoryImage ? (
          <img
            src={categoryImage}
            alt={categoryName}
            class="w-32 h-32 mx-auto mb-6 rounded-full object-cover border-4 border-white/30 shadow-xl"
          />
        ) : (
          <div class="text-8xl mb-6">{categoryIcon}</div>
        )}

        <h1 class="text-4xl md:text-6xl font-bold mb-4">
          {categoryName}
        </h1>

        {categoryDescription && (
          <p class="text-xl md:text-2xl text-emerald-100 max-w-3xl mx-auto">
            {categoryDescription}
          </p>
        )}
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">

    <!-- Rich Text Content Section -->
    {categoryRichText && (
      <div class="mb-16">
        <div class="bg-white rounded-2xl shadow-lg p-8 md:p-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-6">
            About {categoryName}
          </h2>
          <div class="prose prose-lg max-w-none prose-headings:text-emerald-700 prose-a:text-emerald-600 prose-strong:text-gray-900" set:html={categoryRichText}>
          </div>
        </div>
      </div>
    )}

    <!-- Products Section -->
    {products.length > 0 ? (
      <div>
        <div class="mb-8">
          <h2 class="text-3xl font-bold text-gray-900 mb-2">
            Available Products
          </h2>
          <p class="text-gray-600">
            {products.length} product{products.length !== 1 ? 's' : ''} available
          </p>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product: any) => {
            const productName = product.name || product.Name || 'Product';
            const productDescription = product.description || product.Description || '';
            const productImage = product.image?.url || product.Image?.url;
            const imageUrl = productImage ?
              (productImage.startsWith('http') ? productImage : `${API_BASE}${productImage}`) :
              null;

            return (
              <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300">
                {imageUrl ? (
                  <img
                    src={imageUrl}
                    alt={productName}
                    class="w-full h-48 object-cover"
                  />
                ) : (
                  <div class="w-full h-48 bg-gradient-to-br from-emerald-500 to-teal-600 flex items-center justify-center">
                    <span class="text-6xl">{categoryIcon}</span>
                  </div>
                )}

                <div class="p-4">
                  <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
                    {productName}
                  </h3>

                  {productDescription && (
                    <p class="text-gray-600 text-sm mb-4 line-clamp-3">
                      {productDescription}
                    </p>
                  )}

                  <div class="flex items-center justify-between">
                    <span class="inline-block bg-emerald-100 text-emerald-800 px-3 py-1 rounded-full text-xs font-medium">
                      {categoryName}
                    </span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ) : (
      <div class="text-center py-16">
        <div class="text-6xl mb-4">{categoryIcon}</div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">
          No Products Available
        </h2>
        <p class="text-gray-600">
          Check back soon for {categoryName.toLowerCase()} products!
        </p>
      </div>
    )}

    <!-- Back to Categories -->
    <div class="mt-16 text-center">
      <a
        href="/categories"
        class="inline-flex items-center px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-semibold transition-colors"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Browse All Categories
      </a>
    </div>
  </div>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
