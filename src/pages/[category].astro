---
export const prerender = false;

import Layout from '../layouts/Layout.astro';

const { category } = Astro.params;

// Fetch category data dynamically based on the URL parameter
let categoryData = null;
let categoryName = 'Category';
let categorySlug = category;

try {
  console.log('üöÄ Fetching category data for:', category);

  // Fetch the specific category by slug
  const categoryResponse = await fetch(`http://localhost:1337/api/product-categories?filters[Slug][$eq]=${category}&populate=*`);

  if (categoryResponse.ok) {
    const categoryDataResponse = await categoryResponse.json();
    if (categoryDataResponse?.data?.length > 0) {
      categoryData = categoryDataResponse.data[0];
      categoryName = categoryData.attributes?.Name || 'Category';
      categorySlug = categoryData.attributes?.Slug || category;
      console.log('‚úÖ Category found:', categoryName);
    } else {
      console.log('‚ùå Category not found:', category);
      // Return 404 if category doesn't exist
      return Astro.redirect('/404', 404);
    }
  } else {
    console.error('‚ùå Category API Error:', categoryResponse.status);
    return Astro.redirect('/404', 404);
  }
} catch (error) {
  console.error('‚ùå Error fetching category:', error);
  return Astro.redirect('/404', 404);
}

// Fetch products for this category
let products = [];
let apiError = null;

try {
  console.log('üöÄ Fetching products for category:', categoryName);

  // Try to fetch products that belong to this category
  // Adjust the endpoint and filter based on your Strapi setup
  const response = await fetch(`http://localhost:1337/api/dosage-products?populate=*&filters[category][Slug][$eq]=${categorySlug}&pagination[pageSize]=100`);

  if (response.ok) {
    const data = await response.json();
    products = data?.data || [];
    console.log(`‚úÖ ${products.length} products loaded for ${categoryName}`);
  } else {
    const errorData = await response.json();
    console.error('‚ùå Products API Error:', errorData);
    apiError = errorData.error?.message || 'Failed to fetch products';
  }
} catch (error) {
  console.error('‚ùå Error fetching products:', error);
  apiError = error.message;
}
---

<Layout title={`${categoryName} - Cannabis Products | Mint Deals`} description={`Browse ${categoryName} cannabis products and find the best deals from Florida dispensaries.`}>
  <!-- Breadcrumb Navigation -->
  <div class="bg-gray-100 dark:bg-gray-800 py-4">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm">
          <li>
            <a href="/" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">Home</a>
          </li>
          <li class="flex items-center">
            <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
            <a href="/categories" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">Categories</a>
          </li>
          <li class="flex items-center">
            <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
            <span class="text-gray-900 dark:text-white font-medium">{categoryName}</span>
          </li>
        </ol>
      </nav>
    </div>
  </div>

  <!-- Hero Section -->
  <div class="bg-gradient-to-br from-purple-800 via-purple-700 to-indigo-700 text-white py-16">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <div class="text-center">
        <!-- Category Hero Image -->
        {categoryData?.HeroImage?.url && (
          <div class="mb-8">
            <img
              src={`http://localhost:1337${categoryData.HeroImage.url}`}
              alt={categoryName}
              class="w-32 h-32 mx-auto rounded-full object-cover border-4 border-white/20"
            />
          </div>
        )}

        <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold mb-4">
          {categoryName}
        </h1>

        {categoryData?.Description && (
          <p class="text-xl lg:text-2xl text-purple-100 max-w-3xl mx-auto">
            {categoryData.Description}
          </p>
        )}

      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto py-12">
    <!-- Category Stats -->
    <div class="mb-8 flex flex-wrap gap-4 justify-center">
      <div class="bg-white dark:bg-gray-800 rounded-lg px-6 py-3 shadow-sm">
        <div class="text-center">
          <div class="text-2xl font-bold text-purple-600">{products.length}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Products Available</div>
        </div>
      </div>

      {categoryData?.IsActive !== undefined && (
        <div class="bg-white dark:bg-gray-800 rounded-lg px-6 py-3 shadow-sm">
          <div class="text-center">
            <div class={`text-2xl font-bold ${categoryData.IsActive ? 'text-green-600' : 'text-gray-400'}`}>
              {categoryData.IsActive ? '‚úì' : '‚óã'}
            </div>
            <div class="text-sm text-gray-600 dark:text-gray-400">
              {categoryData.IsActive ? 'Active' : 'Inactive'}
            </div>
          </div>
        </div>
      )}
    </div>

    <!-- Products Grid -->
    {products.length === 0 ? (
      <div class="text-center py-16">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-gray-100">No products found</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
          {apiError ? `Error: ${apiError}` : `No products are available in the ${categoryName} category at this time.`}
        </p>
        <div class="mt-6">
          <a
            href="/categories"
            class="inline-flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
            </svg>
            Browse All Categories
          </a>
        </div>
      </div>
    ) : (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {products.map(product => (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow group">
            {/* Product Image */}
            {product.Image?.data?.attributes?.url ? (
              <div class="relative h-48 overflow-hidden">
                <img
                  src={`http://localhost:1337${product.Image.data.attributes.url}`}
                  alt={product?.Name || 'Product'}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                />
              </div>
            ) : (
              <div class="h-48 bg-gray-100 dark:bg-gray-700 flex items-center justify-center">
                <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
                </svg>
              </div>
            )}

            <div class="p-6">
              <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2">
                {product?.Name || 'Product Name'}
              </h3>

              {/* Product Description */}
              {product?.Discription && (
                <p class="text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                  {product.Discription}
                </p>
              )}

              {/* Quantity */}
              {product?.QuantityPerPKG && (
                <div class="flex items-center mb-3">
                  <svg class="w-4 h-4 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h4a1 1 0 011 1v2h4a1 1 0 011 1v4a1 1 0 01-1 1H3a1 1 0 01-1-1V5a1 1 0 011-1h4z"/>
                  </svg>
                  <span class="text-sm text-gray-600 dark:text-gray-300">
                    Qty: {product.QuantityPerPKG}
                  </span>
                </div>
              )}

              {/* Dosing Form */}
              {product?.dosing_form?.data?.attributes?.Name && (
                <div class="mb-3">
                  <span class="inline-block bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-2 py-1 rounded-full text-xs font-medium">
                    {product.dosing_form.data.attributes.Name}
                  </span>
                </div>
              )}

              {/* Ingredients */}
              {product?.ingredients?.data?.length > 0 && (
                <div class="mb-4">
                  <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-1">Ingredients:</h4>
                  <p class="text-xs text-gray-600 dark:text-gray-400">
                    {product.ingredients.data.map(ing => ing.attributes?.Name).filter(Boolean).join(', ')}
                  </p>
                </div>
              )}

              <div class="flex space-x-2">
                <a
                  href={`/products/${product.documentId}`}
                  class="flex-1 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg text-center font-medium transition-colors"
                >
                  View Details
                </a>
                <a
                  href="/locations"
                  class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  Find Store
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    )}

    <!-- Article Content Section -->
    {categoryData?.Content && (
      <div class="mt-16">
        <div class="max-w-4xl mx-auto">
          {categoryData?.Title && (
            <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center">
              {categoryData.Title}
            </h2>
          )}

          {categoryData?.HeroImage?.url && (
            <div class="mb-8">
              <img
                src={`http://localhost:1337${categoryData.HeroImage.url}`}
                alt={categoryData.Title || categoryName}
                class="w-full h-64 md:h-80 object-cover rounded-lg shadow-lg"
              />
            </div>
          )}

          <div class="prose prose-lg dark:prose-invert max-w-none">
            <div set:html={categoryData.Content}></div>
          </div>
        </div>
      </div>
    )}

    <!-- Related Categories -->
    <div class="mt-16">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 text-center">
        Explore Other Categories
      </h2>
      <div class="flex justify-center">
        <a
          href="/categories"
          class="inline-flex items-center px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg font-medium transition-colors"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
          Browse All Categories
        </a>
      </div>
    </div>
  </div>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>