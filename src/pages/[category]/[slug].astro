---
import Layout from '../../layouts/Layout.astro';

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

// Category icon mapping
function getCategoryIcon(slug: string) {
  const icons: Record<string, string> = {
    'flower': 'üåø',
    'pre-rolls': 'üö¨',
    'vaporizers': 'üí®',
    'concentrates': 'üçØ',
    'edibles': 'üç≠',    'topicals': 'üß¥',
    'cartridges': 'üñäÔ∏è',
    'tinctures': 'üíß'
  };
  return icons[slug] || 'üåø';
}

export async function getStaticPaths() {
  const categories = ['flower', 'pre-rolls', 'vaporizers', 'concentrates', 'edibles', 'topicals', 'cartridges'];
  const states = ['florida', 'california', 'colorado', 'nevada', 'arizona', 'massachusetts', 'michigan', 'illinois'];

  const paths = [];

  categories.forEach(category => {
    states.forEach(state => {
      paths.push({
        params: {
          category: category,
          slug: `${category}-in-${state}`
        }
      });
    });
  });

  return paths;
}

const { category, slug } = Astro.params;

// Extract state from slug
const statePart = slug.split('-in-')[1];
const stateName = statePart.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
const categoryName = category.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());

const pageTitle = `${categoryName} in ${stateName} | Cannabis Products`;
const categoryIcon = getCategoryIcon(category);
const description = `Find ${categoryName.toLowerCase()} products and dispensaries in ${stateName}.`;

// Fetch stores in this state
let stores: any[] = [];
try {
  const response = await fetch(`${API_BASE}/stores?filters[state][$eq]=${stateName}&populate=*&pagination[pageSize]=100`);
  if (response.ok) {
    const data = await response.json();
    stores = data?.data || [];
  }
} catch (error) {
  console.error('Error fetching stores:', error);
}

// Fetch products for this category
let products: any[] = [];
try {
  const response = await fetch(`${API_BASE}/products?filters[category][slug][$eq]=${category}&populate=*&pagination[pageSize]=20`);
  if (response.ok) {
    const data = await response.json();
    products = data?.data || [];
  }
} catch (error) {
  console.error('Error fetching products:', error);
}
---

<Layout title={pageTitle} description={description}>
  <!-- Breadcrumb Navigation -->
  <nav class="py-4 bg-slate-50 dark:bg-slate-900">
    <div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="flex items-center space-x-2 text-sm">
        <a href="/" class="text-emerald-600 hover:text-emerald-800">Home</a>
        <span class="text-slate-400">/</span>
        <a href="/categories" class="text-emerald-600 hover:text-emerald-800">Categories</a>
        <span class="text-slate-400">/</span>
        <a href={`/${category}`} class="text-emerald-600 hover:text-emerald-800">{categoryName}</a>
        <span class="text-slate-400">/</span>
        <span class="text-slate-700 dark:text-slate-300">{stateName}</span>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="relative bg-gradient-to-r from-emerald-600 via-emerald-700 to-teal-700 dark:from-emerald-800 dark:via-emerald-900 dark:to-teal-900">
    <div class="absolute inset-0 bg-black opacity-20"></div>
    <div class="relative z-10 px-4 py-24 mx-auto text-center max-w-7xl sm:px-6 lg:px-8">
      <div class="mb-8 text-8xl">{categoryIcon}</div>
      <h1 class="mb-6 text-4xl font-bold tracking-tight text-white md:text-6xl">
        {categoryName} in {stateName}
      </h1>
      <p class="max-w-3xl mx-auto mb-8 text-xl leading-relaxed md:text-2xl text-emerald-100">
        {description}
      </p>
      <div class="flex flex-col justify-center gap-4 sm:flex-row">
        <a href="#stores" class="inline-flex items-center px-6 py-3 font-semibold transition-colors duration-200 bg-white rounded-lg shadow-lg text-emerald-700 hover:bg-emerald-50">
          üè™ Find Dispensaries
        </a>
        <a href="#products" class="inline-flex items-center px-6 py-3 font-semibold text-white transition-colors duration-200 border-2 border-white rounded-lg hover:bg-white hover:text-emerald-700">
          üåø View Products
        </a>
      </div>
    </div>
  </section>

  <!-- Featured Products Section -->
  <section id="products" class="py-16 bg-white dark:bg-gray-900">
    <div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="mb-12 text-center">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white sm:text-4xl">
          {categoryName} Products
        </h2>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Browse popular {categoryName.toLowerCase()} products available in {stateName}
        </p>
      </div>

      {products.length > 0 ? (
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {products.map((product: any) => {
            const productName = product.name || product.Name || 'Product';
            const productDescription = product.description || product.Description || '';
            const productImage = product.image?.url || product.Image?.url;
            const imageUrl = productImage ?
              (productImage.startsWith('http') ? productImage : `${API_BASE}${productImage}`) :
              null;

            return (
              <div class="overflow-hidden transition-shadow duration-300 bg-white rounded-lg shadow-md dark:bg-gray-800 hover:shadow-xl">
                {imageUrl ? (
                  <img
                    src={imageUrl}
                    alt={productName}
                    class="object-cover w-full h-48"
                  />
                ) : (
                  <div class="flex items-center justify-center w-full h-48 bg-gradient-to-br from-emerald-500 to-teal-600">
                    <span class="text-6xl">{categoryIcon}</span>
                  </div>
                )}

                <div class="p-4">
                  <h3 class="mb-2 text-lg font-semibold text-gray-900 dark:text-white line-clamp-2">
                    {productName}
                  </h3>

                  {productDescription && (
                    <p class="mb-4 text-sm text-gray-600 dark:text-gray-300 line-clamp-3">
                      {productDescription}
                    </p>
                  )}

                  <span class="inline-block px-3 py-1 text-xs font-medium rounded-full bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200">
                    {categoryName}
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="mb-4 text-6xl">{categoryIcon}</div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">No Products Available</h3>
          <p class="text-gray-600 dark:text-gray-300">Check back soon for {categoryName.toLowerCase()} products!</p>
        </div>
      )}
    </div>
  </section>

  <!-- Dispensaries Section -->
  <section id="stores" class="py-16 bg-gray-50 dark:bg-gray-800">
    <div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="mb-12 text-center">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white sm:text-4xl">
          Dispensaries in {stateName}
        </h2>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Licensed dispensaries carrying {categoryName.toLowerCase()} products
        </p>
      </div>

      {stores.length > 0 ? (
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {stores.map((store: any) => (
            <div class="p-6 transition-shadow bg-white rounded-lg shadow-md dark:bg-gray-700 hover:shadow-lg">
              <div class="flex items-center mb-4">
                <div class="flex items-center justify-center w-12 h-12 mr-4 text-xl text-white rounded-lg bg-emerald-500">
                  üè™
                </div>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{store.name}</h3>
              </div>

              <div class="space-y-2 text-sm text-gray-600 dark:text-gray-300">
                <div class="flex items-center">
                  <span class="w-4 h-4 mr-2 text-gray-400">üìç</span>
                  <span>{store.city}, {store.state}</span>
                </div>
                {store.phone && (
                  <div class="flex items-center">
                    <span class="w-4 h-4 mr-2 text-gray-400">üìû</span>
                    <span>{store.phone}</span>
                  </div>
                )}
              </div>

              <div class="pt-4 mt-4 border-t border-gray-200 dark:border-gray-600">
                <a
                  href={`/location/${store.slug}`}
                  class="inline-block px-4 py-2 text-sm font-semibold text-white transition-colors rounded-lg bg-emerald-600 hover:bg-emerald-700"
                >
                  View Store Details
                </a>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="mb-4 text-6xl">üè™</div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Finding Dispensaries</h3>
          <p class="text-gray-600 dark:text-gray-300">We're updating our dispensary database for {stateName}. Check back soon!</p>
        </div>
      )}
    </div>
  </section>

  <!-- Related States -->
  <section class="py-16 bg-emerald-50 dark:bg-emerald-900/20">
    <div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <div class="mb-12 text-center">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white">
          {categoryName} in Other States
        </h2>
        <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
          Explore {categoryName.toLowerCase()} products in other locations
        </p>
      </div>

      <div class="grid grid-cols-2 gap-4 md:grid-cols-4 lg:grid-cols-8">
        {['florida', 'california', 'colorado', 'nevada', 'arizona', 'massachusetts', 'michigan', 'illinois']
          .filter(state => state !== statePart)
          .slice(0, 7)
          .map(relatedState => {
            const relatedStateName = relatedState.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
            return (
              <a href={`/${category}/${category}-in-${relatedState}`} class="p-4 text-center transition-all duration-200 bg-white group dark:bg-slate-800 rounded-xl hover:shadow-lg hover:-translate-y-1">
                <div class="mb-2 text-3xl transition-transform duration-200 group-hover:scale-110">
                  üìç
                </div>
                <h3 class="text-sm font-semibold text-gray-900 dark:text-white">
                  {relatedStateName}
                </h3>
              </a>
            );
          })
        }
      </div>
    </div>
  </section>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
