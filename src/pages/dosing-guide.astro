---
export const prerender = true;

import Layout from '../layouts/Layout.astro';

// Fetch all data from API - NO STATIC FALLBACK
let dosingProducts = [];
let dosingForms = [];
let dosingIngredients = [];
let apiError = null;

// Use production Strapi API
const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

try {
  console.log('🚀 Fetching dosing data from API');

  // Fetch all dosing-related data from the API with correct endpoint names
  const [productsResponse, formsResponse, ingredientsResponse] = await Promise.allSettled([
    fetch(`${API_BASE}/dosing-products?populate=*&pagination[pageSize]=1000`),
    fetch(`${API_BASE}/dosage-forms?populate=*&pagination[pageSize]=100`),
    fetch(`${API_BASE}/dosing-ingredints?populate=*&pagination[pageSize]=100`)
  ]);

  // Process dosing products
  if (productsResponse.status === 'fulfilled' && productsResponse.value?.ok) {
    const data = await productsResponse.value.json();
    dosingProducts = data?.data || [];
    console.log('✅ Dosing products loaded:', dosingProducts.length);
  } else {
    console.error('❌ Failed to fetch dosing products');
    if (productsResponse.value) {
      const errorData = await productsResponse.value.json();
      console.error('Products error:', errorData);
    }
  }

  // Process dosage forms
  if (formsResponse.status === 'fulfilled' && formsResponse.value?.ok) {
    const data = await formsResponse.value.json();
    dosingForms = data?.data || [];
    console.log('✅ Dosage forms loaded:', dosingForms.length);
  } else {
    console.error('❌ Failed to fetch dosage forms');
    if (formsResponse.value) {
      const errorData = await formsResponse.value.json();
      console.error('Dosage forms error:', errorData);
    }
  }

  // Process dosing ingredients
  if (ingredientsResponse.status === 'fulfilled' && ingredientsResponse.value?.ok) {
    const data = await ingredientsResponse.value.json();
    dosingIngredients = data?.data || [];
    console.log('✅ Dosing ingredients loaded:', dosingIngredients.length);
  } else {
    console.error('❌ Failed to fetch dosing ingredients');
    if (ingredientsResponse.value) {
      const errorData = await ingredientsResponse.value.json();
      console.error('Ingredients error:', errorData);
    }
  }

} catch (error) {
  console.error('❌ Error fetching dosing data:', error);
  apiError = error.message;
}

// Helper function to safely get string value
const safeString = (value) => {
  if (value === null || value === undefined) return '';
  if (typeof value === 'string') return value;
  if (typeof value === 'object' && value !== null) return JSON.stringify(value);
  return String(value);
};

// Group products by dosage form using API data
const productsByForm = {};
const formDetailsMap = {};

// First, create a map of dosage forms for quick lookup
if (dosingForms.length > 0) {
  dosingForms.forEach(form => {
    try {
      const formName = safeString(form.name || form.Name || 'Other');
      const formSlug = safeString(form.slug || form.Slug || formName).toLowerCase().replace(/\s+/g, '-');

      formDetailsMap[formSlug] = {
        name: formName,
        description: safeString(form.description || form.Description || ''),
        servingInfo: safeString(form.serving_info || form.ServingInfo || ''),
        instructions: safeString(form.instructions || form.Instructions || ''),
        brands: safeString(form.brands || form.Brands || '')
      };
    } catch (err) {
      console.error('Error processing dosing form:', form, err);
    }
  });
}

// Group products by their dosage form
if (dosingProducts.length > 0) {
  dosingProducts.forEach(product => {
    try {
      const dosingForm = product.dosing_form;
      let formName = 'Other';

      if (dosingForm?.Name) {
        formName = safeString(dosingForm.Name);
      } else if (dosingForm?.name) {
        formName = safeString(dosingForm.name);
      }

      const formSlug = safeString(dosingForm?.Slug || dosingForm?.slug || formName).toLowerCase().replace(/\s+/g, '-');

      // Initialize form group if not exists
      if (!productsByForm[formName]) {
        const formDetails = formDetailsMap[formSlug] || {};
        productsByForm[formName] = {
          description: formDetails.description || '',
          servingInfo: formDetails.servingInfo || '',
          instructions: formDetails.instructions || '',
          brands: formDetails.brands || '',
          products: []
        };
      }

      // Get ingredients
      let ingredientsList = '';
      if (product.dosing_ingredints && Array.isArray(product.dosing_ingredints)) {
        ingredientsList = product.dosing_ingredints
          .map(ing => safeString(ing.Name || ing.name || ''))
          .filter(name => name)
          .join(', ');
      }

      // Process DosingPerDose to get cannabinoids info
      let cannabinoidsInfo = '';
      if (product.DosingPerDose && Array.isArray(product.DosingPerDose)) {
        const validDoses = product.DosingPerDose.filter(dose => dose.Cannabinoid && dose.Amount > 0);
        if (validDoses.length > 0) {
          cannabinoidsInfo = validDoses
            .map(dose => `${dose.Amount}${dose.unite || 'mg'} ${dose.Cannabinoid}${dose.Per ? ' per ' + dose.Per : ''}`)
            .join('\n');
        }
      }

      // Add product
      productsByForm[formName].products.push({
        product: safeString(product.Name || product.name || 'Unknown Product'),
        quantity: safeString(product.quantity || product.Quantity || ''),
        cannabinoids: cannabinoidsInfo,
        ingredients: ingredientsList
      });
    } catch (err) {
      console.error('Error processing dosing product:', product, err);
    }
  });
}
---

<Layout title="Dosing Guide - Mint Cannabis" description="Cannabis dosing guide for medical marijuana patients">
  <!-- Header Banner -->
  <div class="bg-black text-white py-8">
    <div class="max-w-[2080px] mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between">
        <h1 class="text-4xl sm:text-5xl font-bold">DOSING GUIDE</h1>
        <img src="/assets/Mint_Full_Logo.png" alt="Mint Cannabis" class="h-16 md:h-20 object-contain" />
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="bg-white min-h-screen">
    <div class="max-w-[2080px] mx-auto px-4 sm:px-6 lg:px-8 py-8">

      {Object.keys(productsByForm).length > 0 ? (
        <>
          {/* Dosage and Strength Introduction */}
          <div class="mb-8">
            <p class="text-base leading-relaxed text-black">
              <strong>Dosage and Strength:</strong> Product dosage and strength are dependent on personal marijuana use, tolerance, and qualifying condition. New users should start with the lowest dose possible and increase the dosage slowly to determine the appropriate dose. Please consult your doctor for condition-specific questions.
            </p>
          </div>

          {/* Dosage Forms */}
          {Object.entries(productsByForm).map(([formName, formData]) => (
            <div class="mb-10" key={formName}>
              <h2 class="text-xl font-bold mb-3 text-black">Dosage Form: {formName}</h2>

              {/* Description */}
              {formData.description && (
                <p class="mb-4 text-base leading-relaxed text-black" set:html={formData.description}></p>
              )}

              {/* Serving Info */}
              {formData.servingInfo && (
                <p class="mb-4 text-base leading-relaxed text-black" set:html={formData.servingInfo}></p>
              )}

            {/* Products Table */}
            <div class="overflow-x-auto mb-4">
              <table class="w-full border-collapse">
                <thead>
                  <tr class="bg-black text-white">
                    <th class="border border-black px-4 py-3 text-left font-bold">Product</th>
                    <th class="border border-black px-4 py-3 text-left font-bold">Cannabinoids per Dose</th>
                    <th class="border border-black px-4 py-3 text-left font-bold">Ingredients</th>
                  </tr>
                </thead>
                <tbody>
                  {formData.products.map((product, idx) => (
                    <tr key={idx} class={idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                      <td class="border border-gray-300 px-4 py-3 align-top text-black">
                        <div class="font-medium">{product.product}</div>
                        {product.quantity && <div class="text-sm text-gray-700">{product.quantity}</div>}
                      </td>
                      <td class="border border-gray-300 px-4 py-3 align-top whitespace-pre-line text-black">
                        {product.cannabinoids || 'Varies by Strain/Dose'}
                      </td>
                      <td class="border border-gray-300 px-4 py-3 align-top text-black">
                        {product.ingredients || '-'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Brands */}
            {formData.brands && (
              <p class="text-sm italic mb-6 text-black">
                <strong>Brands:</strong> {formData.brands}
              </p>
            )}
          </div>
          ))}
        </>
      ) : (
        <div class="text-center py-16">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          <h3 class="mt-2 text-lg font-medium text-black">No Dosing Data Available</h3>
          <p class="mt-1 text-sm text-black">
            {apiError ?
              `Error loading data: ${apiError}. Please ensure the API server is running.` :
              `No dosing information is available. Please check that the API server is running and the content is published.`}
          </p>
        </div>
      )}
    </div>
  </div>
</Layout>

<style>
  /* Print-friendly styling */
  @media print {
    .bg-black {
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
  }

  /* Ensure tables look good on all screen sizes */
  table {
    font-size: 0.95rem;
  }

  @media (max-width: 640px) {
    table {
      font-size: 0.85rem;
    }

    th, td {
      padding: 0.5rem !important;
    }
  }
</style>
