---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';

// Get the location slug from URL
const { locationSlug } = Astro.params;

let locationData = null;
let productsData = [];
let categoriesData = [];
let nearbyLocations = [];
let regionData = null;
let apiError = null;

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

try {
  console.log('üöÄ Fetching location data for:', locationSlug);

  // Fetch location data and related information
  const [storesResponse, categoriesResponse, regionsResponse] = await Promise.allSettled([
    fetch(`${API_BASE}/stores?filters[slug][$eq]=${locationSlug}&populate=*`),
    fetch(`${API_BASE}/product-categories?populate=*&pagination[pageSize]=20`),
    fetch(`${API_BASE}/regions?populate=*`)
  ]);

  // Process store/location data
  if (storesResponse.status === 'fulfilled' && storesResponse.value.ok) {
    const data = await storesResponse.value.json();
    if (data?.data?.length > 0) {
      locationData = data.data[0];
      console.log('‚úÖ Location found:', locationData.name);

      // Process regions to find the matching region
      if (regionsResponse.status === 'fulfilled' && regionsResponse.value.ok) {
        const regionsData = await regionsResponse.value.json();
        const regions = regionsData?.data || [];
        regionData = regions.find(r => r.id === locationData.region?.id || r.id === locationData.region);
      }

      // Fetch products for this location
      try {
        const productsResponse = await fetch(`${API_BASE}/products?populate=*&pagination[pageSize]=20`);
        if (productsResponse.ok) {
          const productsData_response = await productsResponse.json();
          productsData = productsData_response?.data || [];
        }
      } catch (error) {
        console.log('Could not fetch products:', error);
      }

      // Fetch nearby locations in the same region
      if (locationData.region) {
        try {
          const regionId = typeof locationData.region === 'object' ? locationData.region.id : locationData.region;
          const nearbyResponse = await fetch(`${API_BASE}/stores?filters[region][id][$eq]=${regionId}&populate=*&pagination[pageSize]=10`);
          if (nearbyResponse.ok) {
            const nearbyData = await nearbyResponse.json();
            nearbyLocations = (nearbyData?.data || []).filter(loc => loc.documentId !== locationData.documentId);
          }
        } catch (error) {
          console.log('Could not fetch nearby locations:', error);
        }
      }
    } else {
      console.log('‚ùå Location not found:', locationSlug);
      return Astro.redirect('/404', 404);
    }
  } else {
    console.error('‚ùå Location API Error');
    return Astro.redirect('/404', 404);
  }

  // Process categories
  if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.ok) {
    const data = await categoriesResponse.value.json();
    categoriesData = data?.data || [];
  }

} catch (error) {
  console.error('‚ùå Error fetching location data:', error);
  apiError = error.message;
  return Astro.redirect('/404', 404);
}

// Generate page title and description
const pageTitle = locationData ? `${locationData.name} - Mint Cannabis Dispensary` : 'Location Not Found';
const pageDescription = locationData ?
  `Visit ${locationData.name} for premium cannabis products in ${locationData.city || locationData.address?.city}, ${locationData.state || locationData.address?.state || regionData?.name}. View our menu, hours, and directions.` :
  'Location not found';

// Build breadcrumbs
const breadcrumbs = [
  { label: 'Home', url: '/' },
  { label: 'Store Locations', url: '/stores' },
  { label: locationData?.name || 'Location', url: `/location/${locationSlug}` }
];
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Breadcrumb Navigation -->
  <div class="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 py-4 border-b border-gray-200 dark:border-gray-700">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm">
          {breadcrumbs.map((crumb, index) => (
            <li class="flex items-center">
              {index > 0 && (
                <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
              {index === breadcrumbs.length - 1 ? (
                <span class="text-gray-900 dark:text-white font-medium">{crumb.label}</span>
              ) : (
                <a href={crumb.url} class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors">{crumb.label}</a>
              )}
            </li>
          ))}
        </ol>
      </nav>
    </div>
  </div>

  {locationData && (
    <div>
      <!-- Hero Section with Enhanced Design -->
      <div class="relative overflow-hidden">
        <!-- Hero Background -->
        {locationData.store_image?.url || locationData.hero_image?.url ? (
          <div class="h-[500px] bg-cover bg-center relative"
               style={`background-image: url('${API_BASE}${locationData.store_image?.url || locationData.hero_image?.url}')`}>
            <div class="absolute inset-0 bg-gradient-to-b from-black/40 via-black/50 to-black/70"></div>
          </div>
        ) : (
          <div class="h-[500px] bg-gradient-to-br from-green-600 via-emerald-600 to-teal-700 relative">
            <div class="absolute inset-0 bg-black/20"></div>
            <!-- Animated background elements -->
            <div class="absolute inset-0 overflow-hidden pointer-events-none">
              <div class="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl animate-pulse"></div>
              <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-green-300/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
            </div>
          </div>
        )}

        <!-- Hero Content Overlay -->
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="text-center text-white px-4 max-w-4xl mx-auto">
            <h1 class="text-5xl md:text-7xl font-bold mb-4 bg-gradient-to-r from-white to-green-100 bg-clip-text text-transparent">
              {locationData.name}
            </h1>

            <p class="text-xl md:text-2xl text-green-100 mb-6">
              {locationData.city || locationData.address?.city}, {locationData.state || locationData.address?.state || regionData?.name}
            </p>

            <!-- Status and Quick Info -->
            <div class="flex flex-wrap justify-center gap-4 mb-8">
              <span class={`px-6 py-3 rounded-full text-sm font-bold backdrop-blur-sm ${
                locationData.is_active
                  ? 'bg-green-500/80 text-white'
                  : 'bg-red-500/80 text-white'
              }`}>
                {locationData.is_active ? '‚úÖ Open Now' : '‚ùå Currently Closed'}
              </span>

              {regionData && (
                <span class="px-6 py-3 bg-blue-500/80 text-white rounded-full text-sm font-bold backdrop-blur-sm">
                  üìç {regionData.name}
                </span>
              )}

              {locationData.store_code && (
                <span class="px-6 py-3 bg-purple-500/80 text-white rounded-full text-sm font-bold backdrop-blur-sm">
                  üè™ {locationData.store_code}
                </span>
              )}

              {locationData.age_restriction || regionData?.age_restriction ? (
                <span class="px-6 py-3 bg-red-500/80 text-white rounded-full text-sm font-bold backdrop-blur-sm">
                  üîû {locationData.age_restriction || regionData?.age_restriction}+ Only
                </span>
              ) : null}
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-wrap justify-center gap-4">
              {locationData.menu_url && (
                <a
                  href={`/location/${locationData.slug}/menu`}
                  class="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl flex items-center gap-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                  View Menu
                </a>
              )}

              {locationData.online_ordering_url && (
                <button
                  onclick={`window.open('${locationData.online_ordering_url}', '_blank')`}
                  class="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl flex items-center gap-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                  Order Online
                </button>
              )}

              {(locationData.latitude && locationData.longitude) && (
                <button
                  onclick={`window.open('https://maps.google.com/?q=${locationData.latitude},${locationData.longitude}', '_blank')`}
                  class="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl flex items-center gap-2"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Get Directions
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto py-12">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

          <!-- Left Column - Store Information -->
          <div class="lg:col-span-2 space-y-8">

            <!-- Store Details Card -->
            <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 hover:shadow-2xl transition-shadow duration-300">
              <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 flex items-center gap-3">
                <div class="w-10 h-10 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                Store Information
              </h2>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- Contact Information -->
                <div>
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
                    <svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                    </svg>
                    Contact & Location
                  </h3>

                  <div class="space-y-4">
                    {(locationData.address || locationData.street || locationData.city) && (
                      <div class="flex items-start">
                        <svg class="w-5 h-5 mr-3 mt-1 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                        </svg>
                        <div>
                          <p class="text-gray-900 dark:text-white font-medium">
                            {locationData.address?.street || locationData.street || locationData.address}
                          </p>
                          <p class="text-gray-600 dark:text-gray-300">
                            {locationData.city || locationData.address?.city}, {locationData.state || locationData.address?.state || regionData?.name} {locationData.zip_code || locationData.address?.zipCode}
                          </p>
                        </div>
                      </div>
                    )}

                    {locationData.phone && (
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-3 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                        </svg>
                        <a href={`tel:${locationData.phone}`} class="text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-medium transition-colors">
                          {locationData.phone}
                        </a>
                      </div>
                    )}

                    {locationData.email && (
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-3 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                        </svg>
                        <a href={`mailto:${locationData.email}`} class="text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-medium transition-colors">
                          {locationData.email}
                        </a>
                      </div>
                    )}

                    {locationData.website && (
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-3 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                        </svg>
                        <a href={locationData.website} target="_blank" rel="noopener noreferrer" class="text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-medium transition-colors">
                          Visit Website
                        </a>
                      </div>
                    )}
                  </div>
                </div>

                <!-- Hours of Operation -->
                <div>
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
                    <svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                    Hours of Operation
                  </h3>
                  {locationData.hours && locationData.hours.length > 0 ? (
                    <div class="space-y-2 bg-gray-50 dark:bg-gray-700/50 rounded-xl p-4">
                      {locationData.hours.map(hour => (
                        <div class="flex justify-between items-center py-2 border-b border-gray-200 dark:border-gray-600 last:border-0">
                          <span class="text-gray-600 dark:text-gray-300 capitalize font-medium">
                            {hour.dayOfWeek || 'Daily'}
                          </span>
                          <span class="text-gray-900 dark:text-white font-semibold">
                            {hour.is_24hour ?
                              <span class="text-green-600 dark:text-green-400">24 Hours</span> :
                              hour.isClosed ?
                                <span class="text-red-600 dark:text-red-400">Closed</span> :
                                `${hour.openTime || ''} - ${hour.closeTime || ''}`
                            }
                          </span>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div class="bg-gray-50 dark:bg-gray-700/50 rounded-xl p-6 text-center">
                      <p class="text-gray-600 dark:text-gray-300">Hours information not available</p>
                      <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Please call for current hours</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <!-- Product Categories Grid -->
            {categoriesData.length > 0 && (
              <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 hover:shadow-2xl transition-shadow duration-300">
                <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 flex items-center gap-3">
                  <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                  </div>
                  Product Categories
                </h2>
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {categoriesData.map(category => {
                    const catName = category.name || category.Name;
                    const catSlug = category.slug || category.Slug;
                    const catIcon = catSlug?.includes('flower') ? 'üåø' :
                                   catSlug?.includes('concentrate') ? 'üíé' :
                                   catSlug?.includes('pre-roll') || catSlug?.includes('preroll') ? 'üö¨' :
                                   catSlug?.includes('vape') || catSlug?.includes('cartridge') ? 'üí®' :
                                   catSlug?.includes('edible') ? 'üç™' :
                                   catSlug?.includes('topical') ? 'üß¥' :
                                   catSlug?.includes('tincture') ? 'üíß' : 'üå±';

                    return (
                      <a
                        href={`/category/${catSlug}`}
                        class="group relative p-6 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-xl hover:from-green-50 hover:to-emerald-50 dark:hover:from-green-900/20 dark:hover:to-emerald-900/20 transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
                      >
                        <div class="text-center">
                          <div class="text-3xl mb-3 transform group-hover:scale-110 transition-transform duration-300">
                            {catIcon}
                          </div>
                          <h3 class="font-semibold text-gray-900 dark:text-white group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
                            {catName}
                          </h3>
                          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1 opacity-0 group-hover:opacity-100 transition-opacity">
                            Browse Selection ‚Üí
                          </p>
                        </div>
                      </a>
                    );
                  })}
                </div>
              </div>
            )}

            <!-- Store Description -->
            {locationData.description && (
              <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 hover:shadow-2xl transition-shadow duration-300">
                <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                  <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                    </svg>
                  </div>
                  About This Location
                </h2>
                <div class="prose prose-lg dark:prose-invert max-w-none">
                  <p class="text-gray-700 dark:text-gray-300 leading-relaxed text-lg">
                    {locationData.description}
                  </p>
                </div>
              </div>
            )}

            <!-- Featured Products Preview -->
            {productsData.length > 0 && (
              <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-8 hover:shadow-2xl transition-shadow duration-300">
                <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 flex items-center gap-3">
                  <div class="w-10 h-10 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                    </svg>
                  </div>
                  Featured Products
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {productsData.slice(0, 6).map(product => (
                    <div class="group bg-gray-50 dark:bg-gray-700 rounded-xl p-4 hover:shadow-lg transition-all duration-300 transform hover:scale-105">
                      {product.image?.url && (
                        <img
                          src={`${API_BASE}${product.image.url}`}
                          alt={product.name}
                          class="w-full h-40 object-cover rounded-lg mb-4"
                        />
                      )}
                      <h3 class="font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
                        {product.name || product.Name}
                      </h3>
                      {product.category && (
                        <span class="inline-block bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-3 py-1 rounded-full text-xs font-medium">
                          {product.category}
                        </span>
                      )}
                    </div>
                  ))}
                </div>
                {locationData.menu_url && (
                  <div class="mt-8 text-center">
                    <button
                      onclick={`window.open('${locationData.menu_url}', '_blank')`}
                      class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white rounded-xl font-bold transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
                    >
                      View Full Menu
                      <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>

          <!-- Right Column - Sidebar -->
          <div class="lg:col-span-1 space-y-8">

            <!-- Quick Actions Card -->
            <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 sticky top-4">
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Quick Actions
              </h3>
              <div class="space-y-3">
                <a
                  href={`/location/${locationSlug}/menu`}
                  class="block w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-4 py-3 rounded-xl text-center font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg"
                >
                  üìã View Full Menu
                </a>

                {locationData.online_ordering_url && (
                  <button
                    onclick={`window.open('${locationData.online_ordering_url}', '_blank')`}
                    class="w-full bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white px-4 py-3 rounded-xl text-center font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    üõí Order Online
                  </button>
                )}

                <a
                  href={`/location/${locationSlug}/deals`}
                  class="block w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white px-4 py-3 rounded-xl text-center font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg"
                >
                  üî• View Current Deals
                </a>

                {locationData.phone && (
                  <a
                    href={`tel:${locationData.phone}`}
                    class="block w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white px-4 py-3 rounded-xl text-center font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    üìû Call Store
                  </a>
                )}

                {(locationData.latitude && locationData.longitude) && (
                  <button
                    onclick={`window.open('https://maps.google.com/?q=${locationData.latitude},${locationData.longitude}', '_blank')`}
                    class="w-full bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-4 py-3 rounded-xl text-center font-semibold transition-all duration-300 transform hover:scale-105 shadow-lg"
                  >
                    üó∫Ô∏è Get Directions
                  </button>
                )}
              </div>
            </div>

            <!-- Nearby Locations -->
            {nearbyLocations.length > 0 && (
              <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6">
                <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
                  <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Nearby Locations
                </h3>
                <div class="space-y-3">
                  {nearbyLocations.slice(0, 4).map(location => (
                    <a
                      href={`/location/${location.slug}`}
                      class="block p-4 bg-gray-50 dark:bg-gray-700 rounded-xl hover:bg-green-50 dark:hover:bg-green-900/20 transition-all duration-300 transform hover:scale-105 group"
                    >
                      <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
                        {location.name}
                      </h4>
                      <p class="text-sm text-gray-600 dark:text-gray-300 mt-1">
                        {location.city || location.address?.city}, {location.state || location.address?.state || regionData?.name}
                      </p>
                      {location.phone && (
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">
                          üìû {location.phone}
                        </p>
                      )}
                    </a>
                  ))}
                </div>
                <a
                  href="/stores"
                  class="block mt-4 text-center text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-semibold transition-colors"
                >
                  View All Locations ‚Üí
                </a>
              </div>
            )}

            <!-- Store Features/Badges -->
            <div class="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-2xl p-6">
              <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Store Features</h3>
              <div class="space-y-3">
                {locationData.is_active && (
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                    <span class="text-gray-900 dark:text-white font-medium">Currently Open</span>
                  </div>
                )}
                {locationData.online_ordering_url && (
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center">
                      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                      </svg>
                    </div>
                    <span class="text-gray-900 dark:text-white font-medium">Online Ordering Available</span>
                  </div>
                )}
                {locationData.menu_url && (
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center">
                      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                      </svg>
                    </div>
                    <span class="text-gray-900 dark:text-white font-medium">Digital Menu Available</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )}
</Layout>