---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';

// Get the location slug from URL
const { locationSlug } = Astro.params;

let locationData = null;
let apiError = null;

try {
  console.log('üöÄ Fetching location data for deals:', locationSlug);

  // Fetch location data
  const locationResponse = await fetch(`http://localhost:1337/api/locations?filters[Slug][$eq]=${locationSlug}&populate=*`);

  if (locationResponse.ok) {
    const data = await locationResponse.json();
    if (data?.data?.length > 0) {
      locationData = data.data[0];
      console.log('‚úÖ Location found:', locationData.Name);
    } else {
      console.log('‚ùå Location not found:', locationSlug);
      return Astro.redirect('/404', 404);
    }
  } else {
    console.error('‚ùå Location API Error');
    return Astro.redirect('/404', 404);
  }
} catch (error) {
  console.error('‚ùå Error fetching location data:', error);
  apiError = error.message;
  return Astro.redirect('/404', 404);
}

// Build breadcrumbs
const breadcrumbs = [
  { label: 'Home', url: '/' },
  { label: 'Deals', url: '/deals' },
  { label: locationData?.Name || 'Location', url: `/location/${locationSlug}` },
  { label: 'Store Deals', url: `/location/${locationSlug}/deals` }
];

// Generate page title and description
const pageTitle = locationData ? `${locationData.Name} - Deals & Specials` : 'Location Deals';
const pageDescription = locationData ?
  `Find the best cannabis deals and specials at ${locationData.Name} in ${locationData.Address?.city}, ${locationData.Address?.state}.` :
  'Cannabis deals and specials';
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Breadcrumb Navigation -->
  <div class="bg-gray-100 dark:bg-gray-800 py-4">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm">
          {breadcrumbs.map((crumb, index) => (
            <li class="flex items-center">
              {index > 0 && (
                <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
              {index === breadcrumbs.length - 1 ? (
                <span class="text-gray-900 dark:text-white font-medium">{crumb.label}</span>
              ) : (
                <a href={crumb.url} class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">{crumb.label}</a>
              )}
            </li>
          ))}
        </ol>
      </nav>
    </div>
  </div>

  {locationData && (
    <div>
      <!-- Hero Section -->
      <div class="bg-gradient-to-br from-red-600 via-orange-500 to-yellow-500 text-white py-12">
        <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
          <div class="text-center">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">
              üî• {locationData.Name} Deals
            </h1>

            {locationData.Address && (
              <p class="text-xl text-orange-100 mb-6">
                {locationData.Address.city}, {locationData.Address.state}
              </p>
            )}

            <div class="flex flex-wrap justify-center gap-4">
              {/* Status */}
              <span class={`px-4 py-2 rounded-full text-sm font-semibold ${
                locationData.is_active
                  ? 'bg-green-500 text-white'
                  : 'bg-red-500 text-white'
              }`}>
                {locationData.is_active ? 'üü¢ Open for Deals' : 'üî¥ Currently Closed'}
              </span>

              {locationData.over21 && (
                <span class="px-4 py-2 bg-red-500 text-white rounded-full text-sm font-semibold">
                  21+ Required
                </span>
              )}
            </div>

            <!-- Quick Actions -->
            <div class="flex flex-wrap justify-center gap-4 mt-6">
              <a
                href={`/location/${locationSlug}`}
                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                üìç Store Info
              </a>

              <a
                href={`/location/${locationSlug}/menu`}
                class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                üìã Full Menu
              </a>

              {locationData.Online_order_URL && (
                <a
                  href={locationData.Online_order_URL}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                >
                  üõí Order Online
                </a>
              )}
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto py-12">

        <!-- Store Info Bar -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Contact */}
            {locationData.Phone && (
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                <a href={`tel:${locationData.Phone}`} class="text-orange-600 dark:text-orange-400 hover:underline">
                  {locationData.Phone}
                </a>
              </div>
            )}

            {/* Address */}
            {locationData.Address && (
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                </svg>
                <span class="text-gray-600 dark:text-gray-300">
                  {locationData.Address.city}, {locationData.Address.state}
                </span>
              </div>
            )}

            {/* Hours Indicator */}
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-3 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span class="text-gray-600 dark:text-gray-300">
                {locationData.is_active ? 'Open Today' : 'Closed'}
              </span>
            </div>
          </div>
        </div>

        <!-- Dutchie Integration Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div class="bg-gradient-to-r from-orange-500 to-red-500 text-white p-6">
            <h2 class="text-2xl font-bold mb-2">üî• Current Deals & Specials</h2>
            <p class="text-orange-100">
              Browse our latest deals and add items directly to your cart
            </p>
          </div>

          <div class="p-6">
            {/* Check if location has Dutchie script */}
            {(locationData.DutchieScript || true) ? (
              <div>
                <!-- CORS-friendly script container -->
                <div id={`dutchie-deals-${locationSlug}`} class="min-h-96">
                  <!-- Loading placeholder -->
                  <div class="flex items-center justify-center py-16" id={`loading-${locationSlug}`}>
                    <div class="text-center">
                      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-600 mx-auto mb-4"></div>
                      <p class="text-gray-600 dark:text-gray-300">Loading deals...</p>
                    </div>
                  </div>
                </div>

                <!-- Dutchie integration script -->
                <script is:inline define:vars={{ dutchieScript: locationData.DutchieScript, locationSlug, locationName: locationData.Name }}>
                  // Initialize the embed immediately
                  (function() {
                    function initializeDealsEmbed() {
                      try {
                        const container = document.getElementById(`dutchie-deals-${locationSlug}`);
                        const loadingEl = document.getElementById(`loading-${locationSlug}`);

                        console.log('üî• Initializing deals embed for:', locationName);
                        console.log('üìÑ Script available:', dutchieScript ? 'Yes' : 'No - using demo');

                        if (!container) {
                          console.warn('Container not found:', `dutchie-deals-${locationSlug}`);
                          return;
                        }

                        // Create demo content function
                        function createDealsDemo() {
                          return `
                            <div style="padding: 2rem; text-align: center; border: 2px dashed #f59e0b; border-radius: 8px; background: linear-gradient(135deg, #fef3c7 0%, #fed7aa 100%);">
                              <h3 style="color: #d97706; margin-bottom: 1rem; font-size: 1.5rem; font-weight: bold;">üî• Demo Dutchie Deals</h3>
                              <p style="color: #92400e; margin-bottom: 1.5rem;">Live deals and specials from <strong>${locationName}</strong> would appear here.</p>

                              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0;">
                                <div style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); position: relative; overflow: hidden;">
                                  <div style="position: absolute; top: 0; right: 0; background: #dc2626; color: white; padding: 0.25rem 0.75rem; font-size: 0.75rem; font-weight: bold; border-radius: 0 0 0 8px;">25% OFF</div>
                                  <div style="width: 100%; height: 100px; background: #f3f4f6; border-radius: 4px; margin-bottom: 1rem; display: flex; align-items: center; justify-content: center; font-size: 2rem;">üåø</div>
                                  <h4 style="margin: 0.5rem 0; color: #374151; font-weight: 600;">Happy Hour Flower</h4>
                                  <p style="margin: 0; color: #6b7280; font-size: 0.875rem; text-decoration: line-through;">$40/eighth</p>
                                  <p style="margin: 0; color: #dc2626; font-size: 1.125rem; font-weight: bold;">$30/eighth</p>
                                  <button onclick="alert('Demo deal - this would add item to cart!')" style="width: 100%; background: #f59e0b; color: white; border: none; padding: 0.75rem; border-radius: 4px; margin-top: 1rem; cursor: pointer; font-weight: bold; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#d97706'" onmouseout="this.style.backgroundColor='#f59e0b'">üõí Claim Deal</button>
                                </div>

                                <div style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); position: relative; overflow: hidden;">
                                  <div style="position: absolute; top: 0; right: 0; background: #7c3aed; color: white; padding: 0.25rem 0.75rem; font-size: 0.75rem; font-weight: bold; border-radius: 0 0 0 8px;">BOGO</div>
                                  <div style="width: 100%; height: 100px; background: #f3f4f6; border-radius: 4px; margin-bottom: 1rem; display: flex; align-items: center; justify-content: center; font-size: 2rem;">üç≠</div>
                                  <h4 style="margin: 0.5rem 0; color: #374151; font-weight: 600;">Edibles Special</h4>
                                  <p style="margin: 0; color: #6b7280; font-size: 0.875rem;">Buy One Get One</p>
                                  <p style="margin: 0; color: #7c3aed; font-size: 1.125rem; font-weight: bold;">50% Savings</p>
                                  <button onclick="alert('Demo BOGO deal - this would add items to cart!')" style="width: 100%; background: #7c3aed; color: white; border: none; padding: 0.75rem; border-radius: 4px; margin-top: 1rem; cursor: pointer; font-weight: bold; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#6d28d9'" onmouseout="this.style.backgroundColor='#7c3aed'">üç≠ Claim BOGO</button>
                                </div>

                                <div style="background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); position: relative; overflow: hidden;">
                                  <div style="position: absolute; top: 0; right: 0; background: #059669; color: white; padding: 0.25rem 0.75rem; font-size: 0.75rem; font-weight: bold; border-radius: 0 0 0 8px;">NEW</div>
                                  <div style="width: 100%; height: 100px; background: #f3f4f6; border-radius: 4px; margin-bottom: 1rem; display: flex; align-items: center; justify-content: center; font-size: 2rem;">üíé</div>
                                  <h4 style="margin: 0.5rem 0; color: #374151; font-weight: 600;">First-Time Customer</h4>
                                  <p style="margin: 0; color: #6b7280; font-size: 0.875rem;">20% off entire order</p>
                                  <p style="margin: 0; color: #059669; font-size: 1.125rem; font-weight: bold;">Welcome Deal</p>
                                  <button onclick="alert('Demo first-time customer deal - this would apply discount!')" style="width: 100%; background: #059669; color: white; border: none; padding: 0.75rem; border-radius: 4px; margin-top: 1rem; cursor: pointer; font-weight: bold; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor='#047857'" onmouseout="this.style.backgroundColor='#059669'">üíé Welcome Offer</button>
                                </div>
                              </div>

                              <div style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 6px; padding: 1rem; margin-top: 1.5rem;">
                                <strong style="color: #92400e;">‚öôÔ∏è Setup Instructions:</strong>
                                <p style="color: #92400e; margin: 0.5rem 0 0 0; font-size: 0.875rem;">
                                  Add the <code style="background: #fbbf24; color: #92400e; padding: 0.125rem 0.25rem; border-radius: 3px;">DutchieScript</code> field to this location in Strapi with your actual Dutchie deals embed code.
                                </p>
                              </div>
                            </div>
                          `;
                        }

                        // Use actual script or demo
                        const contentToShow = dutchieScript || createDealsDemo();

                        // Hide loading spinner
                        if (loadingEl) {
                          loadingEl.style.display = 'none';
                        }

                        // Handle different types of embed content
                        if (contentToShow.includes('iframe') || contentToShow.includes('<!DOCTYPE') || contentToShow.includes('<html')) {
                          // Full HTML content - use iframe for security
                          const iframe = document.createElement('iframe');
                          iframe.style.width = '100%';
                          iframe.style.minHeight = '600px';
                          iframe.style.border = 'none';
                          iframe.style.borderRadius = '8px';
                          iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox');
                          iframe.setAttribute('loading', 'lazy');

                          container.appendChild(iframe);
                          iframe.contentDocument.open();
                          iframe.contentDocument.write(contentToShow);
                          iframe.contentDocument.close();
                        } else {
                          // Check if this is a Dutchie script with external source
                          if (contentToShow.includes('dutchie.com') && contentToShow.includes('<script')) {
                            console.log('üî• Loading Dutchie external script');

                            // For Dutchie scripts, we need to handle them specially
                            // First inject the HTML structure
                            container.innerHTML = contentToShow;

                            // Find script tags with src attributes and reload them
                            const scripts = container.querySelectorAll('script[src]');
                            scripts.forEach((script, index) => {
                              if (script.src && script.src.includes('dutchie.com')) {
                                console.log('üîÑ Loading Dutchie script:', script.src);

                                // Remove the old script
                                const oldId = script.id;
                                script.remove();

                                // Create new script element
                                const newScript = document.createElement('script');
                                newScript.src = script.src;
                                newScript.async = true;
                                newScript.id = oldId || 'dutchie-embed-script';

                                // Add success/error handlers
                                newScript.onload = function() {
                                  console.log('‚úÖ Dutchie script loaded successfully');
                                };

                                newScript.onerror = function() {
                                  console.error('‚ùå Failed to load Dutchie script');
                                  container.innerHTML = `
                                    <div style="text-align: center; padding: 3rem 2rem; background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; color: #dc2626;">
                                      <div style="font-size: 3rem; margin-bottom: 1rem;">üö´</div>
                                      <h3 style="font-size: 1.5rem; font-weight: bold; margin-bottom: 1rem;">Deals Unavailable</h3>
                                      <p style="margin-bottom: 1.5rem; font-size: 1rem;">
                                        The online deals are temporarily unavailable. Please call the store directly.
                                      </p>
                                      <button onclick="window.location.reload()" style="background: #dc2626; color: white; border: none; padding: 1rem 2rem; border-radius: 8px; cursor: pointer; font-weight: bold; font-size: 1rem;">
                                        üîÑ Try Again
                                      </button>
                                    </div>
                                  `;
                                };

                                // Append to head
                                document.head.appendChild(newScript);
                              }
                            });
                          } else {
                            // Regular HTML/Script content - inject directly
                            container.innerHTML = contentToShow;

                            // Execute any script tags
                            const scripts = container.querySelectorAll('script');
                            scripts.forEach(script => {
                              const newScript = document.createElement('script');
                              if (script.src) {
                                newScript.src = script.src;
                                newScript.async = true;
                                newScript.crossOrigin = 'anonymous';
                              } else {
                                newScript.textContent = script.textContent;
                              }
                              document.head.appendChild(newScript);
                            });
                          }
                        }

                        console.log('‚úÖ Deals embed initialized successfully');
                      } catch (error) {
                        console.error('‚ùå Error initializing deals embed:', error);

                        // Show error fallback
                        const container = document.getElementById(`dutchie-deals-${locationSlug}`);
                        const loadingEl = document.getElementById(`loading-${locationSlug}`);

                        if (loadingEl) loadingEl.style.display = 'none';
                        if (container) {
                          container.innerHTML = `
                            <div style="text-center: padding: 4rem 2rem; background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; color: #dc2626;">
                              <div style="font-size: 3rem; margin-bottom: 1rem;">‚ö†Ô∏è</div>
                              <h3 style="font-size: 1.25rem; font-weight: bold; margin-bottom: 0.5rem;">Deals Temporarily Unavailable</h3>
                              <p style="margin-bottom: 1.5rem; font-size: 0.875rem;">
                                Please call the store directly for current deals and specials.
                              </p>
                              <button onclick="window.location.reload()" style="background: #dc2626; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-weight: bold;">
                                üîÑ Try Again
                              </button>
                            </div>
                          `;
                        }
                      }
                    }

                    // Run immediately if DOM is ready, otherwise wait
                    if (document.readyState === 'loading') {
                      document.addEventListener('DOMContentLoaded', initializeDealsEmbed);
                    } else {
                      initializeDealsEmbed();
                    }
                  })();
                </script>
              </div>
            ) : (
              <!-- Fallback when no Dutchie script -->
              <div class="text-center py-16">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>
                </svg>
                <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-gray-100">Deals Coming Soon</h3>
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  We're setting up our online deals system. Please call the store for current specials!
                </p>

                <div class="mt-6 flex flex-wrap justify-center gap-4">
                  {locationData.Phone && (
                    <a
                      href={`tel:${locationData.Phone}`}
                      class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                    >
                      üìû Call for Deals
                    </a>
                  )}

                  {locationData.Menu_url && (
                    <a
                      href={locationData.Menu_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                    >
                      üåê View Menu
                    </a>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        <!-- Additional Information -->
        <div class="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8">
          <!-- Store Policies -->
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">üìã Deal Policies</h3>
            <ul class="space-y-2 text-sm text-gray-600 dark:text-gray-300">
              <li class="flex items-start">
                <svg class="w-4 h-4 mr-2 mt-0.5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                Valid ID required for all purchases
              </li>
              <li class="flex items-start">
                <svg class="w-4 h-4 mr-2 mt-0.5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                Deals subject to availability
              </li>
              <li class="flex items-start">
                <svg class="w-4 h-4 mr-2 mt-0.5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                Cannot be combined with other offers
              </li>
              {locationData.over21 && (
                <li class="flex items-start">
                  <svg class="w-4 h-4 mr-2 mt-0.5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                  Must be 21+ years old
                </li>
              )}
            </ul>
          </div>

          <!-- Contact & Hours -->
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">üìû Contact & Hours</h3>
            <div class="space-y-3">
              {locationData.Phone && (
                <div class="flex items-center">
                  <svg class="w-4 h-4 mr-3 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                  <a href={`tel:${locationData.Phone}`} class="text-orange-600 dark:text-orange-400 hover:underline">
                    {locationData.Phone}
                  </a>
                </div>
              )}

              {locationData.Address && (
                <div class="flex items-start">
                  <svg class="w-4 h-4 mr-3 mt-1 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <div class="text-sm text-gray-600 dark:text-gray-300">
                    <p>{locationData.Address.street}</p>
                    <p>{locationData.Address.city}, {locationData.Address.state} {locationData.Address.zipCode}</p>
                  </div>
                </div>
              )}

              {locationData.Hours && locationData.Hours.length > 0 && (
                <div class="mt-4">
                  <h4 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2">Store Hours:</h4>
                  <div class="space-y-1">
                    {locationData.Hours.slice(0, 3).map(hour => (
                      <div class="flex justify-between text-xs text-gray-600 dark:text-gray-400">
                        <span class="capitalize">{hour.dayOfWeek || 'Daily'}:</span>
                        <span>
                          {hour.is_24hour ?
                            '24 Hours' :
                            hour.isClosed ?
                              'Closed' :
                              `${hour.openTime || ''} - ${hour.closeTime || ''}`
                          }
                        </span>
                      </div>
                    ))}
                    {locationData.Hours.length > 3 && (
                      <div class="text-xs text-gray-400">
                        +{locationData.Hours.length - 3} more days
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )}
</Layout>