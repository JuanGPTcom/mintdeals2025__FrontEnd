---
export const prerender = false;

import Layout from '../../../layouts/Layout.astro';

// Get the location slug from URL
const { locationSlug } = Astro.params;

let locationData = null;
let productsData = [];
let categoriesData = [];
let apiError = null;

try {
  console.log('🚀 Fetching menu for location:', locationSlug);

  // Fetch location data and products
  const [locationResponse, productsResponse, categoriesResponse] = await Promise.allSettled([
    fetch(`http://localhost:1337/api/locations?filters[Slug][$eq]=${locationSlug}&populate=*`),
    fetch('http://localhost:1337/api/dosage-products?populate=*&pagination[pageSize]=100'),
    fetch('http://localhost:1337/api/product-categories?populate=*&pagination[pageSize]=20')
  ]);

  // Process location data
  if (locationResponse.status === 'fulfilled' && locationResponse.value.ok) {
    const data = await locationResponse.value.json();
    if (data?.data?.length > 0) {
      locationData = data.data[0];
      console.log('✅ Location found:', locationData.Name);
      console.log('📋 DutchieScript field:', locationData.DutchieScript ? 'Found' : 'Not found');
    } else {
      console.log('❌ Location not found:', locationSlug);
      return Astro.redirect('/404', 404);
    }
  } else {
    return Astro.redirect('/404', 404);
  }

  // Process products
  if (productsResponse.status === 'fulfilled' && productsResponse.value.ok) {
    const data = await productsResponse.value.json();
    productsData = data?.data || [];
    console.log('✅ Products loaded:', productsData.length);
  }

  // Process categories
  if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.ok) {
    const data = await categoriesResponse.value.json();
    categoriesData = data?.data || [];
  }

} catch (error) {
  console.error('❌ Error fetching menu data:', error);
  apiError = error.message;
  return Astro.redirect('/404', 404);
}

// Group products by category
const productsByCategory = {};
categoriesData.forEach(category => {
  productsByCategory[category.Name] = productsData.filter(product =>
    product.category?.Name === category.Name ||
    product.product_categories?.some(cat => cat.Name === category.Name)
  );
});

// Build breadcrumbs
const breadcrumbs = [
  { label: 'Home', url: '/' },
  { label: 'Locations', url: '/locations' },
  { label: locationData?.Name || 'Location', url: `/location/${locationSlug}` },
  { label: 'Menu', url: `/location/${locationSlug}/menu` }
];
---

<Layout title={`${locationData?.Name} - Menu | Mint Deals`} description={`Browse the full menu at ${locationData?.Name}. Premium cannabis products available.`}>
  <!-- Breadcrumb Navigation -->
  <div class="bg-gray-100 dark:bg-gray-800 py-4">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm">
          {breadcrumbs.map((crumb, index) => (
            <li class="flex items-center">
              {index > 0 && (
                <svg class="w-4 h-4 mx-2 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
              {index === breadcrumbs.length - 1 ? (
                <span class="text-gray-900 dark:text-white font-medium">{crumb.label}</span>
              ) : (
                <a href={crumb.url} class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">{crumb.label}</a>
              )}
            </li>
          ))}
        </ol>
      </nav>
    </div>
  </div>

  {locationData && (
    <div>
      <!-- Header Section -->
      <div class="bg-gradient-to-br from-green-800 via-green-700 to-emerald-700 text-white py-12">
        <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
          <div class="text-center">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">
              {locationData.Name} Menu
            </h1>

            {locationData.Address && (
              <p class="text-xl text-green-100 mb-6">
                {locationData.Address.city}, {locationData.Address.state}
              </p>
            )}

            <div class="flex flex-wrap justify-center gap-4">
              {locationData.Online_order_URL && (
                <a
                  href={locationData.Online_order_URL}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
                >
                  Order Online
                </a>
              )}

              <a
                href={`/location/${locationSlug}`}
                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
              >
                Store Details
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Menu Content -->
      <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto py-12">

        <!-- Dutchie Integration Section -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden mb-8">
          <div class="bg-gradient-to-r from-green-500 to-emerald-500 text-white p-6">
            <h2 class="text-2xl font-bold mb-2">🛒 Shop Our Menu</h2>
            <p class="text-green-100">
              Browse products, add to cart, and complete your order online
            </p>
          </div>

          <div class="p-6">
            <!-- Menu container -->
            <div id="dutchie-menu-container" class="min-h-96">
              <!-- The Dutchie script will be inserted here -->
              {locationData.DutchieScript ? (
                <div set:html={locationData.DutchieScript} />
              ) : (
                <div class="flex items-center justify-center py-16">
                  <div class="text-center">
                    <p class="text-gray-600 dark:text-gray-300">Menu not available</p>
                  </div>
                </div>
              )}
            </div>

            <!-- Script to relocate Dutchie menu if it appears at bottom -->
            <script is:inline>
              (function() {
                // Wait for Dutchie to load and then move it if needed
                function checkAndRelocateDutchie() {
                  const container = document.getElementById('dutchie-menu-container');
                  if (!container) return;

                  // Look for Dutchie elements that might have been created at the bottom
                  const dutchieIframe = document.querySelector('iframe[src*="dutchie.com"]');
                  const dutchieDiv = document.querySelector('div[id*="se4ekt2e7rH5pspyn"]');

                  // Also check for the actual ID used by Dutchie
                  const dutchieMainDiv = document.getElementById('se4ekt2e7rH5pspyn');

                  if (dutchieIframe && !container.contains(dutchieIframe)) {
                    console.log('🎯 Found Dutchie iframe at bottom, moving to container');
                    container.innerHTML = '';
                    // Ensure iframe has proper styling
                    dutchieIframe.style.width = '100%';
                    dutchieIframe.style.minHeight = '800px';
                    dutchieIframe.style.border = 'none';
                    container.appendChild(dutchieIframe);
                  }

                  if (dutchieMainDiv && !container.contains(dutchieMainDiv)) {
                    console.log('🎯 Found Dutchie main div at bottom, moving to container');
                    container.innerHTML = '';
                    container.appendChild(dutchieMainDiv);
                  } else if (dutchieDiv && !container.contains(dutchieDiv)) {
                    console.log('🎯 Found Dutchie div at bottom, moving to container');
                    container.innerHTML = '';
                    container.appendChild(dutchieDiv);
                  }
                }

                // Check multiple times as Dutchie loads asynchronously
                setTimeout(checkAndRelocateDutchie, 1000);
                setTimeout(checkAndRelocateDutchie, 2000);
                setTimeout(checkAndRelocateDutchie, 3000);
                setTimeout(checkAndRelocateDutchie, 5000);

                // Also use MutationObserver as a backup
                const observer = new MutationObserver((mutations) => {
                  for (const mutation of mutations) {
                    for (const node of mutation.addedNodes) {
                      if (node.nodeType === 1) {
                        // Check if this is a Dutchie element
                        if ((node.id && node.id.includes('se4ekt2e7rH5pspyn')) ||
                            (node.tagName === 'IFRAME' && node.src && node.src.includes('dutchie.com'))) {
                          const container = document.getElementById('dutchie-menu-container');
                          if (container && !container.contains(node)) {
                            console.log('🎯 MutationObserver caught Dutchie element, moving to container');
                            container.innerHTML = '';
                            if (node.tagName === 'IFRAME') {
                              node.style.width = '100%';
                              node.style.minHeight = '800px';
                              node.style.border = 'none';
                            }
                            container.appendChild(node);
                            observer.disconnect();
                            break;
                          }
                        }
                      }
                    }
                  }
                });

                // Start observing
                observer.observe(document.body, { childList: true, subtree: true });

                // Stop after 10 seconds
                setTimeout(() => observer.disconnect(), 10000);
              })();
            </script>
          </div>
        </div>

        <!-- Fallback Menu Categories -->
        {Object.keys(productsByCategory).length > 0 && (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
            <div class="bg-gradient-to-r from-gray-500 to-gray-600 text-white p-6">
              <h2 class="text-2xl font-bold mb-2">📋 Product Categories</h2>
              <p class="text-gray-100">
                Browse our product categories and dosage information
              </p>
            </div>

            <div class="p-6">
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {Object.entries(productsByCategory).map(([categoryName, products]) => (
                  products.length > 0 && (
                    <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
                      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">
                        {categoryName}
                      </h3>
                      <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
                        {products.length} product{products.length !== 1 ? 's' : ''} available
                      </p>
                      <a
                        href={`/${categoryName.toLowerCase()}`}
                        class="inline-flex items-center text-green-600 hover:text-green-700 font-medium text-sm"
                      >
                        Learn More
                        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                      </a>
                    </div>
                  )
                ))}
              </div>
            </div>
          </div>
        )}

        <!-- Contact Information -->
        <div class="mt-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
          <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">📞 Need Help?</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {locationData.Phone && (
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                <a href={`tel:${locationData.Phone}`} class="text-green-600 dark:text-green-400 hover:underline">
                  Call us: {locationData.Phone}
                </a>
              </div>
            )}

            {locationData.Address && (
              <div class="flex items-center">
                <svg class="w-5 h-5 mr-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                </svg>
                <span class="text-gray-600 dark:text-gray-300">
                  {locationData.Address.city}, {locationData.Address.state}
                </span>
              </div>
            )}
          </div>
        </div>

      </div>
    </div>
  )}
</Layout>