---
import Layout from '../layouts/Layout.astro';

// Fetch locations and build regions from existing data
let locationsData = [];
let regionsData = [];
let categoriesData = [];
let apiError = null;

try {
  console.log('üöÄ Fetching locations and categories from Strapi');

  // Fetch locations and categories in parallel
  const [locationsResponse, categoriesResponse] = await Promise.allSettled([
    fetch('http://localhost:1337/api/locations?populate=*&pagination[pageSize]=100'),
    fetch('http://localhost:1337/api/product-categories?populate=*&pagination[pageSize]=20')
  ]);

  // Process locations
  if (locationsResponse.status === 'fulfilled' && locationsResponse.value.ok) {
    const data = await locationsResponse.value.json();
    locationsData = data?.data || [];
    console.log('‚úÖ Locations loaded:', locationsData.length);
  }

  // Process categories
  if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.ok) {
    const data = await categoriesResponse.value.json();
    categoriesData = data?.data || [];
    console.log('‚úÖ Categories loaded:', categoriesData.length);
  }

  // Build regions from location data
  const stateGroups = {};
  locationsData.forEach(location => {
    if (location.Address?.state && location.Address?.city) {
      const state = location.Address.state.toUpperCase();
      const city = location.Address.city;

      if (!stateGroups[state]) {
        stateGroups[state] = {
          name: state === 'AZ' ? 'Arizona' : state === 'NV' ? 'Nevada' : state,
          code: state,
          cities: {},
          locations: [],
          totalLocations: 0
        };
      }

      if (!stateGroups[state].cities[city]) {
        stateGroups[state].cities[city] = {
          name: city,
          locations: [],
          categories: new Set()
        };
      }

      stateGroups[state].cities[city].locations.push(location);
      stateGroups[state].locations.push(location);
      stateGroups[state].totalLocations++;

      // Add categories for this location
      if (location.product_categories) {
        location.product_categories.forEach(cat => {
          stateGroups[state].cities[city].categories.add(cat.Name);
        });
      }
    }
  });

  // Convert to array for easier rendering
  regionsData = Object.values(stateGroups).map(state => ({
    ...state,
    cities: Object.values(state.cities).map(city => ({
      ...city,
      categories: Array.from(city.categories)
    }))
  }));

  console.log('‚úÖ Regions built:', regionsData.length);

} catch (error) {
  console.error('‚ùå Error fetching data:', error);
  apiError = error.message;
}
---

<Layout title="Regions - FLMintDeals" description="Browse cannabis dispensaries by region and area">
  <!-- Hero Section -->
  <div class="bg-gradient-to-br from-blue-800 via-blue-700 to-indigo-700 text-white py-16">
    <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
      <div class="text-center">
        <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold mb-4">
          Regions
        </h1>
        <p class="text-xl lg:text-2xl text-blue-100 max-w-3xl mx-auto">
          Explore cannabis dispensaries and retailers by region
        </p>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto py-12">
    {regionsData.length === 0 ? (
      <div class="text-center py-16">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"/>
        </svg>
        <h3 class="mt-2 text-lg font-medium text-gray-900 dark:text-gray-100">No regions found</h3>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
          {apiError ? `Error: ${apiError}` : 'No regions are available at this time.'}
        </p>
      </div>
    ) : (
      <div>
        <!-- Region Overview Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
          {regionsData.map(region => (
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
              {/* State Header */}
              <div class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6">
                <h2 class="text-2xl font-bold mb-2">{region.name}</h2>
                <div class="flex items-center justify-between">
                  <span class="text-blue-100">
                    {region.totalLocations} dispensar{region.totalLocations !== 1 ? 'ies' : 'y'}
                  </span>
                  <span class="text-blue-100">
                    {region.cities.length} cit{region.cities.length !== 1 ? 'ies' : 'y'}
                  </span>
                </div>
              </div>

              {/* Cities List */}
              <div class="p-6">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Cities & Areas</h3>
                <div class="space-y-3">
                  {region.cities.map(city => (
                    <div class="border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                      <div class="flex items-center justify-between mb-2">
                        <h4 class="font-medium text-gray-900 dark:text-white">{city.name}</h4>
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                          {city.locations.length} location{city.locations.length !== 1 ? 's' : ''}
                        </span>
                      </div>

                      {/* Available Categories */}
                      {city.categories.length > 0 && (
                        <div class="flex flex-wrap gap-1 mt-2">
                          {city.categories.slice(0, 3).map(category => (
                            <span class="inline-block bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs">
                              {category}
                            </span>
                          ))}
                          {city.categories.length > 3 && (
                            <span class="inline-block bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 px-2 py-1 rounded text-xs">
                              +{city.categories.length - 3} more
                            </span>
                          )}
                        </div>
                      )}

                      {/* Quick Links */}
                      <div class="flex space-x-2 mt-3">
                        {categoriesData.slice(0, 2).map(category => (
                          <a
                            href={`/${category.Slug}/${category.Slug}-in-${region.code.toLowerCase() === 'az' ? 'arizona' : region.code.toLowerCase() === 'nv' ? 'nevada' : region.code.toLowerCase()}/${category.Slug}-in-${city.name.toLowerCase().replace(/\s+/g, '-')}`}
                            class="text-xs bg-emerald-100 dark:bg-emerald-900 text-emerald-700 dark:text-emerald-300 px-2 py-1 rounded hover:bg-emerald-200 dark:hover:bg-emerald-800 transition-colors"
                          >
                            {category.Name}
                          </a>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>

                {/* View All Link */}
                <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-600">
                  <a
                    href={`/locations?state=${region.code}`}
                    class="block w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-center font-medium transition-colors"
                  >
                    View All {region.name} Locations
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- Quick Category Navigation -->
        {categoriesData.length > 0 && (
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">
              Browse by Category
            </h2>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
              {categoriesData.map(category => (
                <div class="text-center">
                  <a
                    href={`/${category.Slug}`}
                    class="block p-6 border-2 border-gray-200 dark:border-gray-600 rounded-lg hover:border-blue-500 dark:hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-all group"
                  >
                    <div class="text-3xl mb-2">
                      {category.Slug === 'flower' ? 'üåø' :
                       category.Slug === 'concentrates' ? 'üíé' :
                       category.Slug === 'pre-rolls' ? 'üö¨' :
                       category.Slug === 'vaporizers' ? 'üí®' : 'üå±'}
                    </div>
                    <h3 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400">
                      {category.Name}
                    </h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                      Available in {regionsData.length} region{regionsData.length !== 1 ? 's' : ''}
                    </p>
                  </a>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Popular Destinations -->
        <div class="mt-16 bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-gray-800 dark:to-gray-700 rounded-lg p-8">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">
            Popular Destinations
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {regionsData.flatMap(region =>
              region.cities.filter(city => city.locations.length > 0).slice(0, 3)
            ).slice(0, 6).map(city => (
              <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md hover:shadow-lg transition-shadow">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">{city.name}</h3>
                <p class="text-gray-600 dark:text-gray-300 mb-4">
                  {city.locations.length} dispensar{city.locations.length !== 1 ? 'ies' : 'y'} ‚Ä¢ {city.categories.length} categor{city.categories.length !== 1 ? 'ies' : 'y'}
                </p>
                <div class="grid grid-cols-2 gap-2">
                  {categoriesData.slice(0, 2).map(category => (
                    <a
                      href={`/${category.Slug}/${category.Slug}-in-${regionsData.find(r => r.cities.includes(city))?.code.toLowerCase() === 'az' ? 'arizona' : 'nevada'}/${category.Slug}-in-${city.name.toLowerCase().replace(/\s+/g, '-')}`}
                      class="text-center bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-3 py-2 rounded text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors"
                    >
                      {category.Name}
                    </a>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>